version: "3.9"
services:
  
  node_backend:
    # docker run -i
    stdin_open: true 
    # docker run -t
    tty: true        
    #image name
    image: backend:latest
    #location of docker file
    build: ./
    #container bame for 'docker exec -it <container name>' as an example
    container_name: backend.container
    #location of initizalization file
    entrypoint: sh ./scripts/start_node.sh
    #some times 'localhost' is mostly set to 127.0.0.1. but sometimes 0.0.0.0, and some times complitly custom ip. so for clearity the host is set to 0.0.0.0
    hostname: 0.0.0.0
    #ports to expose to the host network <host port>:<container port>
    ports: 
      - "0.0.0.0:3001:3000"
    # expose port to other containers inside the docker compose default network
    expose:
      - 3000
    #create a two way data sync from this folder to the 'app' folder inside the container file system
    volumes: 
      - ./:/app
      - ~/.ssh:/root/.ssh
    #environment variables
    environment:
      #this mongo user is created on the 'mongo-init.js' file (a file that the mongodb docker image run on the first initialization by its name and location)
      - MONGO_URI=mongodb://user:pass@0.0.0.0:27017
    # boot this server only ofter mongodb is running
    depends_on: 
      - mongo
    networks:
      - MY_NETWORK
  
  mongo:
    # pool the latest mongodb image from dokcerhub
    image: mongo
    #container bame for 'docker exec -it <container name>' as an example
    container_name: mongo
    #TODO: what is that?
    restart: always
    #ports to expose to the host network <host port>:<container port>
    ports:
      - "0.0.0.0:27017:27017"
    volumes:
      # mount a local directory to the file system of the mongo container in order to not loose the data each time the container stops
      - ./$MONGO_LOCAL_STORAGE/data:/data/db
    environment:
      # administrator cradentials
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
      # a database to create on initizalization
      - MONGO_INITDB_DATABASE=wisdo
    # expose port to other containers inside the docker compose default network
    expose:
      - 27017
    # TODO: what is this?
    command: --quiet
    networks:
      - MY_NETWORK

  mongo-express:  #mongo express is a web GUI for mongodb. open localhost:8081 to use it (have nothing to do with express.js)
    # pool the latest mongo-express image from dokcerhub
    image: mongo-express
    #container bame for 'docker exec -it <container name>' as an example
    container_name: mongo-express
    restart: always
    #ports to expose to the host network <host port>:<container port>
    ports:
      # mongo-express 
      - "0.0.0.0:8081:8081"
    environment:
      # administrator cradentials
      - ME_CONFIG_MONGODB_ADMINUSERNAME=user
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      # TODO: what is that?
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
    networks:
      - MY_NETWORK
    depends_on:
      - mongo

  nginx:
    #docker run -i
    stdin_open: true  
    #docker run -t
    tty: true         
    # pool the latest nginx image from dokcerhub
    image: nginx
    #container bame for 'docker exec -it <container name>' as an example
    container_name: nginx
    volumes: # being load after build phase but before entrypoint script/command
      - ./nginx/configs/:/etc/nginx  # the configuration of the server have to be in a specific addres in the linux file system
      - ./nginx/logs/:/var/log/nginx  # in order to see the files nginx logging to. meaning see them here insted of cli into the container
      - ./nginx/scripts/:/app   # it did more sence to me to seperate to entrypoint script and docker-file from the nginx config / assets
    # #some times 'localhost' is mostly set to 127.0.0.1. but sometimes 0.0.0.0, and some times complitly custom ip. so for clearity the host is set to 0.0.0.0
    # hostname: 0.0.0.0
    #ports to expose to the host network <host port>:<container port>
    ports: 
      - "3000:3000"
    expose:
      - 3000
    entrypoint: sh /app/entrypoint.sh
    networks:
      - MY_NETWORK

    

networks:
  MY_NETWORK:
    name: MY_NETWORK
    driver: bridge


